'Arduino_ESP32SPIDMA' with additional code for 'writeBytesDMA(...)' doubling performance over 'writeBytes(...)' in the use case described below.

Tested on ESP32-2432S028R

```
...
#include <Arduino_GFX_Library.h>
#define GFX_BL 21
static Arduino_ESP32SPIDMA bus{2 /* DC */, 15 /* CS */, 14 /* SCK */, 13 /* MOSI */, GFX_NOT_DEFINED /* MISO (12) */};
static Arduino_ILI9341 display{&bus, GFX_NOT_DEFINED /* RST */, display_orientation};
...
void setup() {
  ...
  // initiate display
  if (!display.begin(SPI_FREQUENCY)) {
    ESP_LOGE("bam", "could not initiate Arduino_GFX");
    exit(1);
  }
  pinMode(GFX_BL, OUTPUT);
  digitalWrite(GFX_BL, HIGH);
  display.setAddrWindow(0, 0, display_width, display_height);
  display.startWrite();
  ...
}

void loop() {
  while (scanlines_left_to_render) {
    ...
    bus.writeBytesDMA(
      reinterpret_cast<uint8_t *>(dma_buf),
      uint32_t(display_width * dma_n_scanlines * sizeof(uint16_t)));
    dma_buf = dma_buf_use_first ? dma_buf_1 : dma_buf_2;
    dma_buf_use_first = !dma_buf_use_first;
    ...
  }
}
```
